// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Enum_jenis_user {
  ADMIN
  KASIR
  USER
}

enum Enum_status_user {
  AKTIF
  BANNED
  NONAKTIF
}

enum Enum_status_resep {
  DRAFT
  MENGAJUKAN
  DITERIMA
  DITOLAK
}

enum Enum_sumber_cart {
  RESEP
  MANUAL
}

enum Enum_status_faktur {
  DRAFT
  MENUNGGU_PEMBAYARAN
  JATUH_TEMPO
  DIBATALKAN
  DIKIRIM
  SELESAI
}

model User {
  id String @id @default(cuid())
  username String @unique
  email String @unique
  password String
  role Enum_jenis_user 
  alamat String
  no_hp String?
  status Enum_status_user
  foto_profil String @default("avatar.png")
  createdAt DateTime @default(now())

  pengajuan_resep Pengajuan_resep[]
  cart Cart[]
  faktur_penjualan Faktur_penjualan[]
  faktur_pembelian Faktur_pembelian[]
  ulasan Ulasan[]
  log_aktivitas Log_aktivitas[]

}

model Vendor {
  id String @id @default(cuid())
  kode_vendor String @unique
  nama_vendor String
  alamat String?
  no_hp String?
  createdAt DateTime @default(now())

  faktur_pembelian Faktur_pembelian[]
}

model Jenis_barang {
  id String @id @default(cuid())
  nama String
  createdAt DateTime @default(now())

  barang Barang[]
}

model Barang {
  id String @id @default(cuid())
  id_jenis_barang String
  nama_barang String
  harga_jual Int
  foto_barang String @default("Barang.png")
  createdAt DateTime @default(now())

  detail_obat Detail_obat?
  stok_barang Stok_barang[]
  cart Cart[]
  detail_faktur_penjualan Detail_faktur_penjualan[]
  detail_faktur_pembelian Detail_faktur_pembelian[]
  ulasan Ulasan[]

  jenis_barang Jenis_barang @relation(fields: [id_jenis_barang], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Detail_obat {
  id String @id @default(cuid())
  id_barang String @unique
  deskripsi String?
  indikasi_umum String?
  komposisi String?
  dosis String?
  aturan_pakai String?
  perhatian String?
  kontra_indikasi String?
  efek_samping String?
  golongan String
  kemasan String?
  manufaktur String?
  no_bpom String?
  createdAt DateTime @default(now())

  barang Barang @relation(fields: [id_barang], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Stok_barang {
  id String @id @default(cuid())
  id_barang String
  kode_batch String?
  tanggal_masuk DateTime @default(now())
  tanggal_kadaluarsa DateTime
  jumlah Int
  createdAt DateTime @default(now())

  barang Barang @relation(fields: [id_barang], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Pengajuan_resep {
  id String @id @default(cuid())
  id_user String
  tanggal_pengajuan DateTime @default(now())
  status Enum_status_resep @default(MENGAJUKAN)
  catatan String?
  foto_resep String
  createdAt DateTime @default(now())

  cart Cart[]
  detail_faktur_penjualan Detail_faktur_penjualan[]

  user User @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Cart {
  id String @id @default(cuid())
  id_user String
  id_barang String
  id_resep String?
  jumlah Int
  sumber Enum_sumber_cart

  user User @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  barang Barang @relation(fields: [id_barang], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pengajuan_resep Pengajuan_resep? @relation(fields: [id_resep], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Faktur_penjualan {
  id String @id @default(cuid())
  id_user String
  tanggal_faktur DateTime @default(now())
  alamat String
  status Enum_status_faktur
  total Int
  keterangan String?
  createdAt DateTime @default(now())

  detail_faktur_penjualan Detail_faktur_penjualan[]

  user User @relation(fields: [id_user], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Detail_faktur_penjualan {
  id String @id @default(cuid())
  id_faktur_penjualan String
  id_barang String
  id_resep String?
  jumlah String

  faktur_penjualan Faktur_penjualan @relation(fields: [id_faktur_penjualan], references: [id], onDelete: Cascade, onUpdate: Cascade)
  barang Barang @relation(fields: [id_barang], references: [id], onDelete: Restrict, onUpdate: Cascade)
  pengajuan_resep Pengajuan_resep? @relation(fields: [id_resep], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
}

model Faktur_pembelian {
  id String @id @default(cuid())
  id_user String
  id_vendor String
  tanggal_faktur DateTime @default(now())
  pajak Int?
  total Int
  keterangan String?
  createdAt DateTime @default(now())

  detail_faktur_pembelian Detail_faktur_pembelian[]

  user User @relation(fields: [id_user], references: [id], onDelete: Restrict, onUpdate: Cascade)
  vendor Vendor @relation(fields: [id_vendor], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Detail_faktur_pembelian {
  id String @id @default(cuid())
  id_faktur_pembelian String
  id_barang String
  jumlah String
  harga_beli String

  faktur_pembelian Faktur_pembelian @relation(fields: [id_faktur_pembelian], references: [id], onDelete: Cascade, onUpdate: Cascade)
  barang Barang @relation(fields: [id_barang], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Ulasan {
  id String @id @default(cuid())
  id_user String
  id_barang String
  isi_ulasan String?
  rating Int
  createdAt DateTime @default(now())

  user User @relation(fields: [id_user], references: [id], onDelete: Restrict, onUpdate: Cascade)
  barang Barang @relation(fields: [id_barang], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Log_aktivitas {
  id String @id @default(cuid())
  id_user String 
  aksi String?
  keterangan String?
  createdAt DateTime @default(now())

  user User @relation(fields: [id_user], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

